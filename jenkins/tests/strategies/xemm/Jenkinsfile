node {
    def testName = "xemm strategy"
    sh "echo Starting ${testName}"

    try {
      sh "echo 'try: notify build'"
 
      notifyBuild("STARTED", testName)

      stage("Clone repository") {
        /* Clone repository to jenkins workspace */
        checkout scm
      }

      stage("Build hummingbot") {
        // Clean-up environment
        sh ". /root/miniconda/bin/deactivate"
        sh "./uninstall"
        sh "./install"
        sh ". /root/miniconda/bin/activate hummingbot"
        sh ". /root/miniconda/bin/python3 setup.py build_ext --inplace"
      }

      stage("Run tests") {
        sh "echo run tests"
        sh "/root/miniconda/bin/python3 test/cross_exchange_market_making.py"
      }

    } catch (c) {
      // If there was an exception thrown, the tests failed
      sh "echo 'catch: '${c}"
 
      currentBuild.result = "FAILED"
      throw e      
    } finally {
      sh "echo finally"

      // Success or failure, always send notifications
      notifyBuild(currentBuild.result, testName)
    }
}

def notifyBuild(String buildStatus = "STARTED", String testName = "not defined") {
  sh "echo call notifyBuild"
  // build status of null means successful
  buildStatus =  buildStatus ?: "SUCCESSFUL"

  // Default values
  def result = "FAILURE"

  // Override default values based on build status
  if (buildStatus == "STARTED") {
    buildStatus = "Initiating ${testName} test... "
    result = "UNSTABLE"
  } else if (buildStatus == "SUCCESSFUL") {
    result = "SUCCESS"
  }

  def subject = "${buildStatus}: Job [${env.JOB_NAME}_${env.BUILD_NUMBER}]"
  def description = "${subject} (${env.BUILD_URL})"

  // Send notifications
  discordSend (webhookURL: env.DISCORD_URL, description: description, result: result)
}